'''
this file computes the scatter matrix for a given data and its labels y
 
% /**************************************************************************** 
%  * Job:             calculating scatter matrix                    * 
%  *                                                                          * 
%  *Inputs: dataframe
    Outputs:    scatter = {'s_b': s_b, 's_w':s_w}
                S_b: BETWEEN  CLASS SCATTER MATRIX
%               S_w: WITHIN CLASS SCATTER MATRIX
%  *                                                                          * 
%  * Generated on:    Mon, May 15, 2017                                       * 
%  * Generated by:    Hassan Eldeeb                                                    * 
%  * Version:         1                                                       * 
%  ****************************************************************************/ 
'''

#import pandas as pd
import numpy as np
#import scipy as sp
#from pandas.core.frame import DataFrame
# from preprocessing import preprocessing
# from feature_extraction import feature_extraction
#
# preprocessed_data = preprocessing(r".\data")
# features = feature_extraction(preprocessed_data)

def scatter_matrix(data, y):
    #data = features['C3-P3']
    #y = np.random.randint(0, 4, data.shape[0])
    size = data.shape[1] # calculating the data size
    #classes = data.loc[:,'class'].unique() #get vector of classes
    classes = np.unique(y)
#    no_classes = classes.shape[0] #how many classes do we have
    s_b = np.matrix(np.zeros([size, size])) #initializing s_b
    s_w = np.matrix(np.zeros([size, size]))
    overall_mean = np.matrix(np.mean(data))
    data.reset_index(drop=True, inplace=True)
    for cls in classes:
        class_idx = y.loc[y['Y'] == cls]
        xi = np.matrix(data.iloc[class_idx.index.values])   # get data foreach calss
        mio_i = np.matrix(np.mean(xi, axis=0))  # mean per class
        xi = xi - mio_i # Xi - MeanXi
        p_i = float(xi.shape[0]) / data.shape[0]   # PROBABILITY OF CLASS i
        s_w = s_w + p_i * np.matmul(xi, xi.T)   # CALCULATE S_w
        s_b = s_b + p_i * np.matmul ((mio_i - overall_mean),(mio_i-overall_mean).T )   # CALCULATE S_b
    scatter = {'s_w': s_w, 's_b': s_b}
    return scatter
