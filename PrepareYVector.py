'''
% This function is used to calculate the time line (Y) , The calculation is done
% by iterating over the patient summary file, then finding the seizure occurence
% and based on that assign a class 0 for nothing , 1 for preectal , 2 ectal 
% 3 for postectal , 999 for gap area.
% The input  is a string representing the path for patient summary file
%
% The output is a data frame that represents Y time line
% with classes 0,1,2,3
% /**************************************************************************** 
%  * Job:             Prepare Y Vector                                        * 
%  *                                                                          * 
%  * Generated on:    Mon, May 22, 2017                                       * 
%  * Generated by:    Yousef                                                  * 
%  * Version:         2                                                       * 
%  ****************************************************************************/ 
'''

import numpy as np

class SeizureItem:
     def __init__(self, startTime, endTime):
       self.startTime = int(startTime.replace('\n',''))
       self.endTime = int(endTime.replace('\n',''))
     def displaySeizureData(self):
       print "Start : ", self.startTime,  ", End: ", self.endTime

class EdfItem:
    fileName = '';
    fileStartTime = 0;
    fileEndTime = 0;
    fileNoOfSeizures =  0;
    seizuresList = [];

def convertTimeToSeconds(input_time):
    timeParts = input_time.split(':');
    h = int(timeParts[0])
    m = int(timeParts[1])
    s = int(timeParts[2])
    return (h*3600) + (m*60) +(s)

def getY(summary_file,start_file_no , end_file_no):
    #step1: read the summay file that contains all data about patient
    #text_file=r'C:\Users\Yousef Essam\Desktop\Task1-ReadY\Patient14\test.txt'
    text_file = summary_file
    thresholdValue = 30;
    gapClassValue = 999;
    
    patientFile = open(text_file)
    
    #step2: build an actual list of patient time line without seizures
    count = 0
    lines = patientFile.readlines();
    listOfSeizures = [];
    edfItemList = [];
    edf = EdfItem()          
    flag = False;
    for i in range(0,len(lines)):
        line = lines[i]
        if(flag == True):
            edf.seizuresList = listOfSeizures;
            edfItemList.append(edf);
            flag = False;
        if ('.edf' in line):
            edf = EdfItem();
            listOfSeizures = [];
            flag = False;
            count = count + 1;
        if('File Name' in line):
            fname = line.split(':')[1];
            edf.fileName = fname;
            
        if('File Start Time' in line):
            fileStartTime = line.split(':')[1]+':'+line.split(':')[2]+":"+line.split(':')[3];
            edf.fileStartTime = fileStartTime.replace('\n','');
        if('File End Time' in line):
            fileEndTime = line.split(':')[1]+':'+line.split(':')[2]+":"+line.split(':')[3];
            edf.fileEndTime = fileEndTime.replace('\n','');
        if('Number of Seizures in File' in line):
            count += 1
            numberOfSeizure = int(line.split(':')[1]);
            edf.fileNoOfSeizures = numberOfSeizure;
            if(numberOfSeizure > 0):
                listOfSeizures = [];
                for j in range(1,numberOfSeizure+1):
                    i += 1; # advances to next lines based on the number of availble seizures (start Time)
                    line = lines[i];
                    tempSeizureStart = '';
                    tempSeizureEnd = '';
                    if('seconds' in line):
                        tempSeizureStart = line.split(':')[1];
                    i += 1; # advances to next lines based on the number of availble seizures (end Time)
                    line = lines[i];
                    if('seconds' in line):
                        tempSeizureEnd = line.split(':')[1];
                    seizureObj = SeizureItem(tempSeizureStart.split(' ')[1],tempSeizureEnd.split(' ')[1])
                    listOfSeizures.append(seizureObj)
            flag = True;      
    
    #The following code to add the last item in the summary file
    if(flag == True):
        edf.seizuresList = listOfSeizures;
        edfItemList.append(edf);
        flag = False;
    #end Adding
    
    subtract_value = 0;
    flag = 0;
    days = 1;
    prevTime = -1;
    file_duration=0;
    numberOfEdfItems = len(edfItemList);
    for i in range(0,numberOfEdfItems):
        tempEdfItem = edfItemList[i];
        x1 = int(str(tempEdfItem.fileName.split('_')[1]).split('.')[0]);
      
        if(x1 >= start_file_no and x1 <= end_file_no):
            sTime =  tempEdfItem.fileStartTime;
            eTime =  tempEdfItem.fileEndTime;
            sTime_seconds = convertTimeToSeconds(sTime);
            if (i == 0):
                # Got the start of TimeLine
               subtract_value = sTime_seconds;
             
            #solve the problem of days differnce in the Timeline                                       
            
            if(prevTime > sTime_seconds):
                days = days + 1
            diff = sTime_seconds-subtract_value;
            
            if(diff <= 0 or flag == 1):
                flag = 1;
                diff = diff + (86400*(days-1)); # add 24 hours in seconds unit;                               
            
            prevTime = sTime_seconds;
            file_duration = convertTimeToSeconds(eTime) - sTime_seconds;
            endTimePrev = diff + file_duration;
    
    
    SimulationData = np.zeros(endTimePrev+1)
    
    subtract_value = 0;
    flag = 0;
    days = 1;
    prevTime = -1;
    prevc2Start = -1;
    endTimePrev = 0;
    for i in range(0,numberOfEdfItems):
        tempEdfItem = edfItemList[i];
        x1 = int(str(tempEdfItem.fileName.split('_')[1]).split('.')[0]);
        if(x1 >= start_file_no and x1 <= end_file_no):
            sTime =  tempEdfItem.fileStartTime;
            eTime =  tempEdfItem.fileEndTime;
            sTime_seconds = convertTimeToSeconds(sTime);
            if (i == 0):
                # Got the start of TimeLine
               subtract_value = sTime_seconds;
             
            #solve the problem of days differnce in the Timeline                                       
           
            
            if(prevTime > sTime_seconds):
                days = days + 1
            diff = sTime_seconds-subtract_value;
            
            if(diff <= 0 or flag == 1):
                flag = 1;
                diff = diff + (86400*(days-1)); # add 24 hours in seconds unit;
            
            prevTime = convertTimeToSeconds(sTime);
            miniGapStart = endTimePrev+1;
            miniGapEnd = diff+1;
            if((diff - endTimePrev) > thresholdValue):
               gapDuration = (diff - endTimePrev);
               SimulationData[endTimePrev:endTimePrev+gapDuration-1]=gapClassValue;
            
            file_duration = convertTimeToSeconds(eTime) - sTime_seconds;
            endTimePrev = diff + file_duration;
            
            seizure_period = -1;
            
            if(len(tempEdfItem.seizuresList) > 0):
                for t in range(0,len(tempEdfItem.seizuresList)):
                    seizure_period = -1;
                    seizure_period = tempEdfItem.seizuresList[t].startTime;
                    seizure_period = seizure_period + diff;
                    
                    sPointc1Start = seizure_period-3600;
                    sPointc1End = seizure_period;
                    sPointc2Start = seizure_period;
                    sPointc2End = seizure_period+180;
                    sPointc3Start = seizure_period+180;
                    sPointc3End = seizure_period+1980;
                    
                    if(sPointc1Start<=0):
                        sPointc1Start = 1;
                        
                    SimulationData[sPointc1Start:sPointc1End]=1;
                    SimulationData[sPointc2Start:sPointc2End]=2;
                    SimulationData[sPointc3Start:sPointc3End]=3;
                    
                    if(prevc2Start > 0):
                        SimulationData[prevc2Start:prevc2End]=2;
                    
                    prevc2Start = sPointc2Start;
                    prevc2End = sPointc2End;                          
                
                
            if (i != 0):
                SimulationData[miniGapStart:miniGapEnd-1]=gapClassValue;
    return SimulationData
          
                      
            
        


