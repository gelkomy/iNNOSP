'''

% 
% /**************************************************************************** 
%  * Job:             Feature Basis Selection                                      * 
%  * Description:Feature Basis Selection is being calculated using greedy 
%    search algorithm. This function computes the selected R features for every
     electrode. The input is a dictionary of dataframes indexed by electrode 
     name with all the features.The output is dictionary of dataframe 
     ( features and y) with electrode name as the index of the dictionary. 
     This function use the Compute J , Compute R , and Scatter Matrix
%                                     * 
%  *Inputs:  Dictionary of DataFrames
%  *Output:  Dictionary of DataFrames (selected features, and output)         * 
%  * Generated on:    Mon, May 22, 2017                                       * 
%  * Generated by:    Gamal Elkomy                                            * 
%  * Version:         1                                                       * 
%  ****************************************************************************/ 
'''

import copy
from compute_j import compute_j
def feature_basis_selection(data,y, R):
    # for each electrode perform the feature basis selection
    all_electrodes={} # dictionary of dataframes with selected features that is returned
    for electrode in data:
        
        #dataframe of the current electrode
        electrode_data=data[electrode]
        #getting the r of the current electrode
        r= R[electrode]
        selected_features=[] #the subset of features
        
        
        #to perform greedy search
        for i in range(0,r):
            max_j=-99999 # for the greedy seach of maximum j
            #selecting the next best feature f*
            for f in range(0, electrode_data.shape[1]):
                if f not in selected_features:
                    current_features= copy.copy(selected_features)
                    current_features.append(f)
                    current_subset=electrode_data[current_features]

                    #compute j for the current subset
                    j=compute_j(current_subset,y)
                    #print 'j of ', str(current_features), '= ', j
                    if j > max_j and j != 0:
                        max_j=j
                        max_f=f
            selected_features.append(max_f)
            # print(selected_features)
        all_electrodes[electrode]=electrode_data[selected_features]
                    
    #    print "the selected features for the electrode " , electrode, " is ", selected_features
        
    return all_electrodes    
